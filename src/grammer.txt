program -> declaration* | END;
declaration -> letdeclaration| mutdeclaration |procdeclaration | statements;
procdeclaration -> "proc" IDENTIFIER "(" parameter? ")" blockstatement ;
parameters -> mutdeclaration  ("," mutdeclaration )* ;
letdeclaration -> "let" IDENTIFIER "=" exprstatement ";" ;
mutdeclaration -> "mut" IDENTIFIER ("=" exprstatement)? ";"; 
statements -> ifstatement | blockstatement | outstatement| whilestatement| forstatement |assignmentstatement | instatement | exprstatement ";";
forstatement -> "for" "(" ( mutdeclaration | IDENTIFIER) ";" exprstatement ";" exprstatement ";" ")" declaration+ ;
whilestatement -> "while" "(" expr_stmt ")"statements+;
assignmentstatement -> (IDENTIFIER "=")+ exprstatement ";";
outstatement -> "out" exprstatement ( ("," exprstatement)* )? ";";
blockstatement -> "{" (declaration*)? "}";
ifstatement -> "if" "(" exprstatement ")" statements+ ("else" ( statements+ ) )? ;
exprstatement -> logic_or;
logic_or -> logic_and (( "or" ) logic_and)*;
logic_and -> equality (("and") equality)*;
equality -> comparison (( == | !=) comparison)*;
comparison -> add ((> | >= | < | <= )add)*;
add -> mult ((+ | -)mult)*;
mult -> unary ((* | /)unary)*;
unary -> (- | !)unary* | caller;
caller -> literal  "(" arguments? ")" ";" ;
arguments -> exprstatement ("," exprstatement)*;
literal -> NUMBER | STRING | "true" | "false" | IDENTIFIER | "nil" | "(" exprstatement ")";